name: InterviewPro Production Deployment

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  SERVER_HOST: 3.138.194.143
  SERVER_USER: ec2-user
  DEPLOY_PATH: /home/ec2-user

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        cd backend
        pip install -r requirements.txt
        
    - name: Run backend tests
      run: |
        cd backend
        python -m pytest tests/ --verbose || echo "Tests completed"
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Run frontend tests
      run: |
        cd frontend
        npm test -- --coverage --watchAll=false || echo "Frontend tests completed"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build backend image
      run: |
        cd backend
        docker build -f Dockerfile.prod -t interviewpro-backend:latest .
        
    - name: Build frontend image
      run: |
        cd frontend
        docker build -f Dockerfile.prod -t interviewpro-frontend:latest .
        
    - name: Save Docker images
      run: |
        docker save interviewpro-backend:latest | gzip > backend-image.tar.gz
        docker save interviewpro-frontend:latest | gzip > frontend-image.tar.gz
        
    - name: Upload backend image artifact
      uses: actions/upload-artifact@v3
      with:
        name: backend-image
        path: backend-image.tar.gz
        retention-days: 1
        
    - name: Upload frontend image artifact
      uses: actions/upload-artifact@v3
      with:
        name: frontend-image
        path: frontend-image.tar.gz
        retention-days: 1

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download backend image
      uses: actions/download-artifact@v3
      with:
        name: backend-image
        
    - name: Download frontend image
      uses: actions/download-artifact@v3
      with:
        name: frontend-image
      
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts
        
    - name: Create deployment directory
      run: |
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} "mkdir -p ${{ env.DEPLOY_PATH }}/deployment"
        
    - name: Upload deployment files
      run: |
        scp docker-compose.prod.yml ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.DEPLOY_PATH }}/
        scp nginx-https.conf ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.DEPLOY_PATH }}/
        scp -r scripts/ ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.DEPLOY_PATH }}/
        
    - name: Upload Docker images
      run: |
        scp backend-image.tar.gz ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.DEPLOY_PATH }}/deployment/
        scp frontend-image.tar.gz ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }}:${{ env.DEPLOY_PATH }}/deployment/
        
    - name: Pre-deployment checks
      run: |
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'EOF'
          cd ${{ env.DEPLOY_PATH }}
          
          # 运行部署前检查
          if [ -f "scripts/deploy_checklist.sh" ]; then
            chmod +x scripts/deploy_checklist.sh
            ./scripts/deploy_checklist.sh
          fi
          
          # 检查磁盘空间
          DISK_USAGE=$(df / | awk 'NR==2 {print $5}' | sed 's/%//')
          if [ "$DISK_USAGE" -gt 85 ]; then
            echo "❌ 磁盘空间不足: ${DISK_USAGE}%"
            exit 1
          fi
          
          # 检查内存
          MEMORY_USAGE=$(free | awk 'NR==2{printf "%.0f", $3/$2*100}')
          if [ "$MEMORY_USAGE" -gt 90 ]; then
            echo "❌ 内存使用率过高: ${MEMORY_USAGE}%"
            exit 1
          fi
          
          echo "✅ 部署前检查通过"
        EOF
        
    - name: Backup current state
      run: |
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'EOF'
          cd ${{ env.DEPLOY_PATH }}
          
          # 备份当前数据库
          if [ -f "scripts/database_backup.sh" ]; then
            chmod +x scripts/database_backup.sh
            ./scripts/database_backup.sh
            echo "✅ 数据库备份完成"
          fi
          
          # 备份当前配置
          BACKUP_DIR="backup/$(date '+%Y-%m-%d_%H-%M-%S')"
          mkdir -p "$BACKUP_DIR"
          
          if [ -f "docker-compose.prod.yml" ]; then
            cp docker-compose.prod.yml "$BACKUP_DIR/"
          fi
          
          if [ -f "nginx-https.conf" ]; then
            cp nginx-https.conf "$BACKUP_DIR/"
          fi
          
          echo "✅ 配置备份完成: $BACKUP_DIR"
        EOF
        
    - name: Load new Docker images
      run: |
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'EOF'
          cd ${{ env.DEPLOY_PATH }}/deployment
          
          echo "📦 加载新的Docker镜像..."
          docker load < backend-image.tar.gz
          docker load < frontend-image.tar.gz
          
          # 重新标记镜像
          docker tag interviewpro-backend:latest ec2-user-backend:latest
          docker tag interviewpro-frontend:latest ec2-user-frontend:latest
          
          echo "✅ Docker镜像加载完成"
        EOF
        
    - name: Deploy services
      run: |
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'EOF'
          cd ${{ env.DEPLOY_PATH }}
          
          echo "🚀 开始部署服务..."
          
          # 使用分阶段部署
          if [ -f "scripts/deploy_staged.sh" ]; then
            chmod +x scripts/deploy_staged.sh
            ./scripts/deploy_staged.sh
          else
            # 回退到基本部署
            docker-compose -f docker-compose.prod.yml down --remove-orphans
            docker-compose -f docker-compose.prod.yml up -d
          fi
          
          echo "✅ 服务部署完成"
        EOF
        
    - name: Post-deployment verification
      run: |
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'EOF'
          cd ${{ env.DEPLOY_PATH }}
          
          echo "🔍 进行部署后验证..."
          
          # 等待服务启动
          sleep 30
          
          # 检查容器状态
          UNHEALTHY_CONTAINERS=$(docker ps --filter "status=exited" --format "{{.Names}}" | grep -E "(mysql|redis|backend|nginx)" || echo "")
          
          if [ -n "$UNHEALTHY_CONTAINERS" ]; then
            echo "❌ 发现停止的容器: $UNHEALTHY_CONTAINERS"
            exit 1
          fi
          
          # 检查网站响应
          if curl -f -s "https://offerott.com" > /dev/null; then
            echo "✅ 网站访问正常"
          else
            echo "❌ 网站无法访问"
            exit 1
          fi
          
          # 检查API响应
          if curl -f -s "https://offerott.com/api/v1/" > /dev/null; then
            echo "✅ API访问正常"
          else
            echo "❌ API无法访问"
            exit 1
          fi
          
          # 检查数据库连接
          if docker exec interviewpro-mysql mysql -u user -p'password' -e "SELECT 1;" > /dev/null 2>&1; then
            echo "✅ 数据库连接正常"
          else
            echo "❌ 数据库连接失败"
            exit 1
          fi
          
          echo "🎉 部署验证成功！"
        EOF
        
    - name: Cleanup
      if: always()
      run: |
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'EOF'
          cd ${{ env.DEPLOY_PATH }}
          
          # 清理部署文件
          rm -rf deployment/
          
          # 清理旧的Docker镜像
          docker image prune -f
          
          echo "🧹 清理完成"
        EOF
        
    - name: Send deployment notification
      if: always()
      run: |
        if [ "${{ job.status }}" = "success" ]; then
          echo "✅ 部署成功! 网站: https://offerott.com"
        else
          echo "❌ 部署失败，请检查日志"
        fi
        
        # 这里可以添加Slack/邮件通知
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"InterviewPro deployment ${{ job.status }}"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: Setup SSH for Rollback
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ env.SERVER_HOST }} >> ~/.ssh/known_hosts
        
    - name: Emergency Rollback
      run: |
        ssh ${{ env.SERVER_USER }}@${{ env.SERVER_HOST }} << 'EOF'
          cd ${{ env.DEPLOY_PATH }}
          
          echo "🆘 开始紧急回滚..."
          
          # 使用紧急恢复脚本
          if [ -f "scripts/emergency_recovery.sh" ]; then
            chmod +x scripts/emergency_recovery.sh
            echo "7" | ./scripts/emergency_recovery.sh  # 选择完整恢复选项
          else
            # 手动回滚
            echo "📦 回滚到上一个工作版本..."
            
            # 恢复最新的备份配置
            LATEST_BACKUP=$(ls -td backup/*/ | head -1)
            if [ -n "$LATEST_BACKUP" ]; then
              cp "$LATEST_BACKUP"docker-compose.prod.yml . 2>/dev/null || true
              cp "$LATEST_BACKUP"nginx-https.conf . 2>/dev/null || true
            fi
            
            # 重启服务
            docker-compose -f docker-compose.prod.yml down
            docker-compose -f docker-compose.prod.yml up -d
          fi
          
          echo "🔄 回滚完成，请手动验证服务状态"
        EOF 